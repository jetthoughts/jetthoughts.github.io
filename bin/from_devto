#!/usr/bin/env ruby

class SaveArticleToMarkdown
  require 'date'
  require 'time'
  require 'net/http'
  require 'json'
  require 'csv'
  require 'yaml'

  DEV_TO_API_HOST = 'https://dev.to/api/articles/jetthoughts/'.freeze
  JT_BLOG_HOST = 'https://jetthoughts.github.io/blog/'.freeze
  USELESS_WORDS = ['and', 'the', 'a', 'but', 'to', 'is', 'so'].freeze

  def initialize(article_slug)
    @article_slug = article_slug
  end

  def self.call(article_slug)
    new(article_slug).call
  end

  def call
    data = fetch_article_data
    set_custom_filename(data)
    save_to_md_file(data)
    update_canonical_url_on_dev_to(data)
    fill_seo_attributes(data)
  end

  def set_custom_filename(data)
    file = find_file_with_id(data['id'])

    return if file.nil?

    File.rename(file, 'content/blog/' + slug(data) + File.extname(file))
  end

  def fetch_article_data
    max_attempts = 5
    attempts = 0

    begin
      uri = URI(DEV_TO_API_HOST + @article_slug)
      response = Net::HTTP.get_response(uri)

      raise "Got response code: #{response.code}" unless response.code == '200'

      JSON.parse(response.body)

    rescue Exception => e
      attempts += 1
      puts "Attempt #{attempts} of #{max_attempts} failed with message: #{e.message}"
        retry if attempts < max_attempts
    end
  end

  def save_to_md_file(data)
    local_article = find_file_with_id(data['id'])
    File.open(local_article || stored_post_path_for(data), 'w') { |file| file.write(data['body_markdown']) }
    puts "File #{slug(data)}.md successfully created."
  end

  def stored_post_path_for(data)
    __dir__ + "/../content/blog/" + slug(data) + ".md"
  end

  def slug(data)
    csv_data = read_csv
    row = csv_data.find { |r| r[0] == data['id'].to_s }

    if row
      row[1]
    else
      generated_slug = [data['slug'].split('-')[0..-2], data['tags'][0], data['tags'][1]]
                       .flatten
                       .uniq
                       .filter { |segment| !USELESS_WORDS.include?(segment) }
                       .compact
                       .join('-')
      write_csv(data['id'], generated_slug)
      generated_slug
    end
  end

  def update_canonical_url_on_dev_to(data)
    uri = URI("https://dev.to/api/articles/#{data['id']}")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    request = Net::HTTP::Put.new(uri)
    request['api-key'] = ENV["DEVTO_API_KEY"]
    request['Content-Type'] = 'application/json'
    pp JT_BLOG_HOST + slug(data)

    # request.body = { article: { canonical_url: JT_BLOG_HOST + slug(data) } }.to_json
    # http.request(request)
  end

  def fill_seo_attributes(data)
    markdown = File.read(stored_post_path_for(data))

    File.open(stored_post_path_for(data), 'w') do |file|
      file.write("---\n")
      file.write("dev_to_id: #{data['id'].to_json}\n")
      file.write("title: #{data['title'].to_json}\n")
      file.write("description: #{data['description'].to_json}\n")
      file.write("created_at: \"#{data['created_at']}\"\n")
      file.write("edited_at: \"#{data['edited_at']}\"\n")
      # file.write("sync_date: \"#{Time.now.utc.strftime('%Y-%m-%dT%H:%M:%SZ')}\"\n")
      file.write("draft: false\n")
      file.write("tags: #{data['tags']}\n")
      file.write("canonical_url: \"#{data['canonical_url']}\"\n")
      file.write("slug: \"#{slug(data)}\"\n")
      file.write("---\n")
      file.write(markdown)
    end
  end

  def read_csv
    CSV.read(File.expand_path('../devto_urls_mapping.csv', __dir__), headers: false)
  end

  def write_csv(id, slug)
    CSV.open(File.expand_path('../devto_urls_mapping.csv', __dir__), 'a+') do |csv|
      csv << [id, slug]
    end
  end

  def find_file_with_id(id)
    Dir.glob('content/blog/*.md').each do |filename|
      data = YAML.load_file(filename)
      return filename if data['dev_to_id'] == id
    end
    nil
  end
end

page = 0
force = ARGV.include?('-f') ? true : false

def fetch_articles(page)
  uri = URI("https://dev.to/api/articles?username=jetthoughts&page=#{page}")
  response = Net::HTTP.get(uri)
  articles = JSON.parse(response)

  articles.empty? ? nil : articles
end

loop do
  articles = fetch_articles(page)

  break if articles.nil? || articles.empty?

  articles.each do |article|
    created_at = Time.parse(article['created_at']) if article['created_at']
    edited_at = Time.parse(article['edited_at']) if article['edited_at']

    if (created_at && (Time.now - created_at) < 1800) || (edited_at && (Time.now - edited_at) < 1800) || force
      SaveArticleToMarkdown.call(article['slug'])
    end
  end

  page += 1
end

puts 'TODO: Need to uncomment canonical url update when blog will be live.'
