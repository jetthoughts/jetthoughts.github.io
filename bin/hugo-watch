#!/usr/bin/env bash
set -Eeuo pipefail

# Start Hugo in watch mode for test environment
# Automatically updates public-dtest folder when files change
# 
# Usage:
#   bin/hugo-watch          # Start with logs (interactive)
#   bin/hugo-watch -d       # Start in background
#   bin/hugo-watch --force  # Force restart if already running

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Starting Hugo Watch Mode for Testing${NC}"
echo -e "${YELLOW}üìÅ Output directory: public-dtest${NC}"
echo -e "${YELLOW}üî® Mode: Build-only (no server)${NC}"
echo ""

# Track if we started the service
STARTED_SERVICE=false

# Function to cleanup on exit
cleanup() {
    if [ "$STARTED_SERVICE" = true ] || [ "$FORCE_RESTART" = true ]; then
        echo -e "\n${YELLOW}Stopping Hugo watch mode...${NC}"
        docker compose -f .dev/compose.yml stop hugo-watch
        echo -e "${GREEN}‚úÖ Hugo watch mode stopped${NC}"
    fi
}

# Register cleanup function
trap cleanup EXIT INT TERM

# Parse command line arguments
FORCE_RESTART=false
DETACH_MODE=false

for arg in "$@"; do
    case $arg in
        -d|--detach)
            DETACH_MODE=true
            ;;
        --force|--restart)
            FORCE_RESTART=true
            ;;
    esac
done

# Check if service is already running
if docker compose -f .dev/compose.yml ps hugo-watch | grep -q "running"; then
    echo -e "${YELLOW}‚ö†Ô∏è Hugo watch service is already running${NC}"
    echo -e "${BLUE}Current status:${NC}"
    docker compose -f .dev/compose.yml ps hugo-watch
    echo ""
    
    if [ "$FORCE_RESTART" = true ]; then
        echo -e "${YELLOW}Force restart requested - restarting service...${NC}"
        docker compose -f .dev/compose.yml restart hugo-watch
        STARTED_SERVICE=true
    else
        read -p "Do you want to restart the service? (y/N): " restart_choice
        case $restart_choice in
            [Yy]* )
                echo -e "${YELLOW}Restarting Hugo watch service...${NC}"
                docker compose -f .dev/compose.yml restart hugo-watch
                STARTED_SERVICE=true
                ;;
            * )
                echo -e "${GREEN}Using existing Hugo watch service${NC}"
                STARTED_SERVICE=false
                ;;
        esac
    fi
else
    # Start the hugo-watch service
    echo -e "${GREEN}Starting Hugo watch service...${NC}"
    docker compose -f .dev/compose.yml up -d hugo-watch
    STARTED_SERVICE=true
fi

# Wait for service to be healthy
echo -e "${YELLOW}Waiting for Hugo watch to start...${NC}"
max_attempts=30
attempt=0

while [ $attempt -lt $max_attempts ]; do
    if docker compose -f .dev/compose.yml ps hugo-watch | grep -q "Up"; then
        echo -e "${GREEN}‚úÖ Hugo watch mode is ready!${NC}"
        echo ""
        echo -e "${YELLOW}Features enabled:${NC}"
        echo -e "  ‚úÖ Auto-rebuild on file changes"
        echo -e "  ‚úÖ File output to public-dtest/"
        echo -e "  ‚úÖ Production environment build"
        echo -e "  ‚úÖ 1s poll interval"
        echo -e "  üî® Build-only mode (no web server)"
        echo ""
        break
    fi
    
    attempt=$((attempt + 1))
    sleep 1
    echo -n "."
done

if [ $attempt -eq $max_attempts ]; then
    echo -e "\n${RED}‚ùå Hugo watch mode failed to start${NC}"
    docker compose -f .dev/compose.yml logs hugo-watch
    exit 1
fi

# Follow logs if not running in background mode
if [ "$DETACH_MODE" = false ]; then
    echo -e "${YELLOW}Following Hugo logs (Ctrl+C to stop)...${NC}"
    echo ""
    docker compose -f .dev/compose.yml logs -f hugo-watch
else
    echo -e "${GREEN}Hugo watch mode running in background${NC}"
    echo -e "${YELLOW}View logs with: docker compose -f .dev/compose.yml logs -f hugo-watch${NC}"
    echo -e "${YELLOW}Check status with: bin/hugo-watch-status${NC}"
fi