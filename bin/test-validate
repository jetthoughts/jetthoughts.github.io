#!/bin/bash
set -e

# Pre-task validation - BLOCKS work if tests fail
validate_before_work() {
  echo "üö® MANDATORY: Pre-task test validation..."
  if ! bin/test; then
    echo "‚ùå BLOCKED: Tests must pass before starting work"
    echo "Fix existing tests first!"
    exit 1
  fi
  echo "‚úÖ Tests passing - work can begin"
}

# During-task validation with automatic rollback (FAST - use bin/test)
validate_and_rollback() {
  echo "üîç Quick validation with bin/test..."
  if ! bin/test; then
    echo "‚ùå TESTS FAILED - ROLLING BACK"
    git checkout -- .
    echo "üîÑ Rolled back to last working state"
    echo "‚ö†Ô∏è  Changes reverted due to test failure"
    exit 1
  fi
  echo "‚úÖ Tests still passing"
}

# Quick validation after each change (non-blocking suggestion)
quick_validate() {
  echo "‚ö° Quick test check..."
  if ! bin/test; then
    echo "‚ö†Ô∏è  WARNING: Tests failing after change"
    echo "Consider reverting or fixing immediately"
    return 1
  fi
  echo "‚úÖ Quick test passing"
  return 0
}

# Post-task validation gate (COMPREHENSIVE - all validation)
validate_completion() {
  echo "üéØ Comprehensive validation before completion..."
  
  # First run quick tests
  echo "1Ô∏è‚É£ Running bin/test (quick validation)..."
  if ! bin/test; then
    echo "‚ùå BLOCKED: Local tests failing"
    exit 1
  fi
  
  # Then run docker tests
  echo "2Ô∏è‚É£ Running bin/dtest (docker validation)..."
  if ! bin/dtest; then
    echo "‚ùå BLOCKED: Docker tests failing"
    exit 1
  fi
  
  # Finally verify build works
  echo "3Ô∏è‚É£ Running bin/build (build validation)..."
  if ! bin/build; then
    echo "‚ùå BLOCKED: Build failing"
    exit 1
  fi
  
  echo "‚úÖ ALL VALIDATION PASSING:"
  echo "   ‚úì bin/test - Local tests pass"
  echo "   ‚úì bin/dtest - Docker tests pass"
  echo "   ‚úì bin/build - Build succeeds"
  echo "üéâ Task can be marked complete!"
}

# Test-first validation for bug fixes
require_reproduction_test() {
  local issue="$1"
  echo "üß™ Checking for reproduction test..."
  
  if [ -z "$issue" ]; then
    echo "‚ùå BLOCKED: Issue name required"
    exit 1
  fi
  
  # Check if reproduction test exists
  if [ ! -f "test/reproductions/${issue}.sh" ]; then
    echo "‚ùå BLOCKED: Create reproduction test first"
    echo "Required: test/reproductions/${issue}.sh"
    exit 1
  fi
  
  echo "‚úÖ Reproduction test found"
}

# Memory coordination for test status
store_test_status() {
  local status="$1"
  local agent="$2"
  
  npx claude-flow@alpha hooks memory-store \
    --key "test-status/current" \
    --value "{\"status\":\"$status\",\"agent\":\"$agent\",\"time\":\"$(date)\"}"
}

# Check if another agent broke tests
check_swarm_test_status() {
  local status=$(npx claude-flow@alpha hooks memory-retrieve --key "test-status/current" 2>/dev/null || echo '{"status":"unknown"}')
  
  if echo "$status" | grep -q '"status":"failing"'; then
    echo "‚ö†Ô∏è  WARNING: Another agent has broken tests"
    echo "Status: $status"
    echo "‚ùå BLOCKED: Fix tests before proceeding"
    exit 1
  fi
}
