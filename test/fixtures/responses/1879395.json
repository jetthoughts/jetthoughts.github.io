{
  "type_of": "article",
  "id": 1879395,
  "title": "Recent Searches & Sorting Hashes: How They are Connected",
  "description": "In one of the applications, that we are developing, we needed to implement the storing of 10 last...",
  "readable_publish_date": "Jun 6",
  "slug": "recent-searches-sorting-hashes-how-they-are-connected-4965",
  "path": "/jetthoughts/recent-searches-sorting-hashes-how-they-are-connected-4965",
  "url": "https://dev.to/jetthoughts/recent-searches-sorting-hashes-how-they-are-connected-4965",
  "comments_count": 0,
  "public_reactions_count": 0,
  "collection_id": null,
  "published_timestamp": "2024-06-06T15:55:48Z",
  "positive_reactions_count": 0,
  "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fraw.githubusercontent.com%2Fjetthoughts%2Fjetthoughts.github.io%2Fmaster%2Fstatic%2Fassets%2Fimg%2Fblog%2Frecent-searches-sorting-hashes-how-they-are-connected-ruby-rails%2Ffile_0.jpeg",
  "social_image": "https://media2.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fraw.githubusercontent.com%2Fjetthoughts%2Fjetthoughts.github.io%2Fmaster%2Fstatic%2Fassets%2Fimg%2Fblog%2Frecent-searches-sorting-hashes-how-they-are-connected-ruby-rails%2Ffile_0.jpeg",
  "canonical_url": null,
  "created_at": "2024-06-06T15:55:49Z",
  "edited_at": "2024-10-21T17:06:50Z",
  "crossposted_at": null,
  "published_at": "2024-06-06T15:55:48Z",
  "last_comment_at": "2024-06-06T15:55:48Z",
  "reading_time_minutes": 5,
  "tag_list": "ruby, rails, development",
  "tags": [
    "ruby",
    "rails",
    "development"
  ],
  "body_html": "<p><a href=\"https://media.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fraw.githubusercontent.com%2Fjetthoughts%2Fjetthoughts.github.io%2Fmaster%2Fstatic%2Fassets%2Fimg%2Fblog%2Frecent-searches-sorting-hashes-how-they-are-connected-ruby-rails%2Ffile_0.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://media.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fraw.githubusercontent.com%2Fjetthoughts%2Fjetthoughts.github.io%2Fmaster%2Fstatic%2Fassets%2Fimg%2Fblog%2Frecent-searches-sorting-hashes-how-they-are-connected-ruby-rails%2Ffile_0.jpeg\" alt=\"Unsplash Photo: [Caspar Rubin](https://unsplash.com/@casparrubin)\" loading=\"lazy\" width=\"800\" height=\"356\"></a></p>\n\n<p>In one of the applications, that we are developing, we needed to implement the storing of 10 last user search requests. If they were simple text queries, that would be the end of the story. However, the issue turned out to be much more complicated, because we had to save search filters.</p>\n\n<p>In general, the search filter may be represented as a set of attributes, such as:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>price_min: 100,\nprice_max: 1000,\ncolor: 'red'\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>On one hand, with the help of all these attributes, we can simply create a model. But on the other hand, it is not a beneficial way, because there are quite a lot of filter attributes. Obviously, we should be able to add these attributes easily. I believe that the easiest way to do so is to keep them as a hash in the model in the serialized field.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"c1\"># Our new model</span>\n<span class=\"k\">class</span> <span class=\"nc\">SearchFilter</span>\n  <span class=\"n\">belongs_to</span> <span class=\"ss\">:user</span>\n  <span class=\"n\">serialize</span> <span class=\"ss\">:filter</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># And association for it in users</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"n\">has_many</span> <span class=\"ss\">:search_filters</span>\n<span class=\"k\">end</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Since we need only the last 10 filters, we will add a callback that deletes old search filters after creating new ones.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"n\">after_create</span> <span class=\"ss\">:trim_old_filters</span>\n\n<span class=\"kp\">private</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">trim_old_filters</span>\n  <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">search_filters</span><span class=\"p\">.</span><span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"ss\">updated_at: :desc</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nf\">offset</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nf\">destroy_all</span>\n<span class=\"k\">end</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Also, as we would like to avoid the saving of identical filters, we will check the uniqueness of created filters.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"n\">validates</span> <span class=\"ss\">:filter</span><span class=\"p\">,</span> <span class=\"ss\">uniqueness: </span><span class=\"p\">{</span> <span class=\"ss\">scope: :user_id</span> <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>But here we come across with one feature of this validation. It will allow to save identical filters, if attributes in them will be in a different order.</p>\n\n<p>That means, it will allow to store in the database both the hash { price_min: 100, color: 'red' }, and the hash { color: 'red', price_min: 100 }, although Ruby will return true when comparing for equality.</p>\n\n<p>This happens because before the validation ActiveRecord serializes the hash in a text string. In addition it makes a request to the database to retrieve the rows with the same value.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"p\">{</span> <span class=\"ss\">price_min: </span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"ss\">color: </span><span class=\"s1\">'red'</span> <span class=\"p\">}.</span><span class=\"nf\">to_yaml</span>\n<span class=\"c1\">#=&gt; \"---\\n:price_min: 100\\n:color: red\\n\"</span>\n\n<span class=\"p\">{</span> <span class=\"ss\">color: </span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"ss\">price_min: </span><span class=\"mi\">100</span> <span class=\"p\">}.</span><span class=\"nf\">to_yaml</span>\n<span class=\"c1\">#=&gt; \"---\\n:color: red\\n:price_min: 100\\n\"</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>As you can see, the lines are completely different.</p>\n\n<p><a href=\"http://www.ruby-doc.org/core-2.1.2/Hash.html\" target=\"_blank\" rel=\"noopener noreferrer\">Official documentation</a> says:</p>\n\n<blockquote>\n<p>Hashes enumerate their values in the order that the corresponding keys were inserted.</p>\n</blockquote>\n\n<p>Obviously, the hash serialization occurs in the same order in which values are added to the hash.</p>\n\n<p>As a result, we have to make all hashes enumerated in the given deterministic order before writing or checking for the presence in the base. In other words, we need to sort the hash is such a way that it is always enumerated in the alphanumeric order of its keys.</p>\n\n<p>So, there are many ways to do that. But it would be no fun just to pick any of them at random. Therefore, we decided to find the best way of doing that by two characteristics: speed and readability.</p>\n\n<p>To begin with, let’s talk about speed.</p>\n\n<p>We have created a hash:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"no\">KEYS_IN_HASH</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"no\">KEYS_IN_HASH</span><span class=\"p\">).</span><span class=\"nf\">to_a</span><span class=\"p\">.</span><span class=\"nf\">shuffle</span><span class=\"p\">.</span><span class=\"nf\">inject</span><span class=\"p\">({})</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"nb\">hash</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">|</span> <span class=\"nb\">hash</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"nf\">to_s</span><span class=\"p\">;</span> <span class=\"nb\">hash</span> <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And benchmarked some ways of sorting it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"nb\">require</span> <span class=\"s1\">'benchmark'</span>\n<span class=\"no\">Benchmark</span><span class=\"p\">.</span><span class=\"nf\">bm</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n  <span class=\"c1\"># sorting by #sort and converting to hash by ruby 2.0 method #to_h</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:sort</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">.</span><span class=\"nf\">to_h</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># sorting by #sort and converting to hash by creating hash from array of key/value arrays</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:old_sort</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Hash</span><span class=\"p\">[</span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># sorting by #sort_by and converting to hash by ruby 2.0 method #to_h</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:sort_by</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">sort_by</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">|</span> <span class=\"n\">k</span> <span class=\"p\">}.</span><span class=\"nf\">to_h</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># sorting by #sort_by and converting to hash by creating hash from array of key/value arrays</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:old_sort_by</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"no\">Hash</span><span class=\"p\">[</span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">sort_by</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">|</span> <span class=\"n\">k</span> <span class=\"p\">}]</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># creating new hash and set values in needed order</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:new_hash</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">nh</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"o\">|</span> <span class=\"n\">nh</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"p\">};</span> <span class=\"n\">nh</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># creating new hash and filling it while iterating by inject</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:new_hash_inj</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">.</span><span class=\"nf\">inject</span><span class=\"p\">({})</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">nh</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">|</span> <span class=\"n\">nh</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">];</span> <span class=\"n\">nh</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\"># removing and readding values to hash in the needed order</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"ss\">:by_deleting!</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">.</span><span class=\"nf\">sort</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"o\">|</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">.</span><span class=\"nf\">delete</span> <span class=\"n\">k</span> <span class=\"p\">};</span> <span class=\"n\">h</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And here are results which we have got:</p>\n\n<p><em>For **20 **keys in hash:</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>                    user      system     total       real\n    new_hash      0.000000   0.000000   0.000000 (  0.000015)\n    new_hash_inj  0.000000   0.000000   0.000000 (  0.000015)\n    by_deleting!  0.000000   0.000000   0.000000 (  0.000017)\n    sort_by       0.000000   0.000000   0.000000 (  0.000024)\n    old_sort      0.000000   0.000000   0.000000 (  0.000038)\n    old_sort_by   0.000000   0.000000   0.000000 (  0.000042)\n    sort          0.000000   0.000000   0.000000 (  0.000050)\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><em>And for **100 **items:</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>                    user      system      total      real\n    new_hash      0.000000   0.000000   0.000000 (  0.000046)\n    new_hash_inj  0.000000   0.000000   0.000000 (  0.000049)\n    by_deleting!  0.000000   0.000000   0.000000 (  0.000086)\n    old_sort_by   0.000000   0.000000   0.000000 (  0.000093)\n    sort_by       0.000000   0.000000   0.000000 (  0.000097)\n    sort          0.000000   0.000000   0.000000 (  0.000275)\n    old_sort      0.000000   0.000000   0.000000 (  0.000286)\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><em>And for **100’000 **items:</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>                    user      system     total       real\n    new_hash      0.090000   0.010000   0.100000 (  0.094235)\n    by_deleting!  0.120000   0.000000   0.120000 (  0.126402)\n    new_hash_inj  0.190000   0.000000   0.190000 (  0.193813)\n    sort_by       0.200000   0.010000   0.210000 (  0.202221)\n    old_sort_by   0.290000   0.000000   0.290000 (  0.295042)\n    sort          0.640000   0.010000   0.650000 (  0.668481)\n    old_sort      0.680000   0.000000   0.680000 (  0.689761)\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><em>And for **1’000’000 **records (by the way, if you have a hash with 1’000’000 keys, then you are doing something wrong):</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>                    user     system      total        real\n    by_deleting!  1.620000   0.010000   1.630000 (  1.656473)\n    new_hash      1.790000   0.030000   1.820000 (  1.885463)\n    new_hash_inj  1.810000   0.020000   1.830000 (  1.856330)\n    old_sort_by   3.650000   0.030000   3.680000 (  3.725720)\n    sort_by       3.760000   0.040000   3.800000 (  3.834567)\n    old_sort      8.860000   0.150000   9.010000 (  9.091311)\n    sort          9.610000   0.120000   9.730000 (  9.843766)\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Consequently, we can see that creating a ‘new hash’ is the fastest way to sort a hash, less fast is ‘by deleting!’ (but it modifies an original array and this is not always allowed). And the shortest way (‘sort’)is also the longest one (from 3x for 20 items to 7x for 1’000’000 items).</p>\n\n<p>In my opinion, a ‘sort by’ method is a golden mean for sorting hashes. It is simple to understand what it does, it is not so time-consuming as a ‘sort’ method and not so difficult to read as ‘new hash’.</p>\n\n<p>Although, we should remember that dealing with big hashes is a bad practice. And if small ones are used, users can’t see any performance difference and ‘sort’ will work well too.</p>\n\n<p>So, when we decided how we will organize a hash value, let’s add this ordering before validation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"n\">before_validation</span> <span class=\"ss\">:sort_filter_attributes_by_its_names</span>\n\n<span class=\"kp\">private</span> \n\n<span class=\"k\">def</span> <span class=\"nf\">sort_filter_attributes_by_its_names</span>\n  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">.</span><span class=\"nf\">sort_by</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">|</span> <span class=\"n\">k</span> <span class=\"p\">}.</span><span class=\"nf\">to_h</span>\n<span class=\"k\">end</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The last thing to do is to write a method that will perform adding or updating of search filters:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nc\">self</span><span class=\"o\">.</span><span class=\"nf\">store</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">filter</span><span class=\"p\">)</span>\n  <span class=\"n\">search_filter</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">search_filters</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">filter: </span><span class=\"n\">filter</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"k\">if</span> <span class=\"n\">search_filter</span><span class=\"p\">.</span><span class=\"nf\">valid?</span>\n\n  <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"nf\">search_filters</span><span class=\"p\">.</span><span class=\"nf\">find_by_filter</span><span class=\"p\">(</span><span class=\"n\">search_filter</span><span class=\"p\">).</span><span class=\"nf\">touch</span>\n<span class=\"k\">end</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Further, use this method in the controller action that handles user’s searches.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight ruby\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">SearchController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"n\">after_action</span> <span class=\"ss\">:store_filter</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">store_filter</span>\n    <span class=\"no\">SearchFilter</span><span class=\"p\">.</span><span class=\"nf\">store</span> <span class=\"n\">current_user</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:filter</span><span class=\"p\">]</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Finally, we have implemented storing of user’s recent search filters and compared efficiency of sorting hashes in Ruby, used to enumerate in deterministic order.</p> {{< youtube 0RKpf3rK57I >}} \n\n",
  "body_markdown": "\n![Unsplash Photo: [Caspar Rubin](https://unsplash.com/@casparrubin)](https://raw.githubusercontent.com/jetthoughts/jetthoughts.github.io/master/static/assets/img/blog/recent-searches-sorting-hashes-how-they-are-connected-ruby-rails/file_0.jpeg)\n\nIn one of the applications, that we are developing, we needed to implement the storing of 10 last user search requests. If they were simple text queries, that would be the end of the story. However, the issue turned out to be much more complicated, because we had to save search filters.\n\nIn general, the search filter may be represented as a set of attributes, such as:\n\n```\nprice_min: 100,\nprice_max: 1000,\ncolor: 'red'\n```\n\nOn one hand, with the help of all these attributes, we can simply create a model. But on the other hand, it is not a beneficial way, because there are quite a lot of filter attributes. Obviously, we should be able to add these attributes easily. I believe that the easiest way to do so is to keep them as a hash in the model in the serialized field.\n\n```ruby\n# Our new model\nclass SearchFilter\n  belongs_to :user\n  serialize :filter\nend\n\n# And association for it in users\nclass User\n  has_many :search_filters\nend\n```\n\nSince we need only the last 10 filters, we will add a callback that deletes old search filters after creating new ones.\n\n```ruby\nafter_create :trim_old_filters\n\nprivate\n\ndef trim_old_filters\n  user.search_filters.order(updated_at: :desc)\n    .offset(10).destroy_all\nend\n```\n\nAlso, as we would like to avoid the saving of identical filters, we will check the uniqueness of created filters.\n\n```ruby\nvalidates :filter, uniqueness: { scope: :user_id }\n```\n\nBut here we come across with one feature of this validation. It will allow to save identical filters, if attributes in them will be in a different order.\n\nThat means, it will allow to store in the database both the hash { price_min: 100, color: 'red' }, and the hash { color: 'red', price_min: 100 }, although Ruby will return true when comparing for equality.\n\nThis happens because before the validation ActiveRecord serializes the hash in a text string. In addition it makes a request to the database to retrieve the rows with the same value.\n\n```ruby\n{ price_min: 100, color: 'red' }.to_yaml\n#=> \"---\\n:price_min: 100\\n:color: red\\n\"\n\n{ color: 'red', price_min: 100 }.to_yaml\n#=> \"---\\n:color: red\\n:price_min: 100\\n\"\n```\n\nAs you can see, the lines are completely different.\n\n[Official documentation](http://www.ruby-doc.org/core-2.1.2/Hash.html) says:\n>  Hashes enumerate their values in the order that the corresponding keys were inserted.\n\nObviously, the hash serialization occurs in the same order in which values are added to the hash.\n\nAs a result, we have to make all hashes enumerated in the given deterministic order before writing or checking for the presence in the base. In other words, we need to sort the hash is such a way that it is always enumerated in the alphanumeric order of its keys.\n\nSo, there are many ways to do that. But it would be no fun just to pick any of them at random. Therefore, we decided to find the best way of doing that by two characteristics: speed and readability.\n\nTo begin with, let’s talk about speed.\n\nWe have created a hash:\n\n```ruby\nKEYS_IN_HASH = 20\nh = (1..KEYS_IN_HASH).to_a.shuffle.inject({}) { |hash, v| hash[v] = v.to_s; hash }\n```\n\nAnd benchmarked some ways of sorting it:\n\n```ruby\nrequire 'benchmark'\nBenchmark.bm do |x|\n  # sorting by #sort and converting to hash by ruby 2.0 method #to_h\n  x.report(:sort) { h.sort.to_h }\n\n  # sorting by #sort and converting to hash by creating hash from array of key/value arrays\n  x.report(:old_sort) { Hash[h.sort] }\n\n  # sorting by #sort_by and converting to hash by ruby 2.0 method #to_h\n  x.report(:sort_by) { h.sort_by { |k, v| k }.to_h }\n\n  # sorting by #sort_by and converting to hash by creating hash from array of key/value arrays\n  x.report(:old_sort_by) { Hash[h.sort_by { |k, v| k }] }\n\n  # creating new hash and set values in needed order\n  x.report(:new_hash) { nh = {}; h.keys.each { |k| nh[k] = h[k] }; nh }\n\n  # creating new hash and filling it while iterating by inject\n  x.report(:new_hash_inj) { h.keys.inject({}) { |nh, k| nh[k] = h[k]; nh } }\n\n  # removing and readding values to hash in the needed order\n  x.report(:by_deleting!) { h.keys.sort.each { |k| h[k] = h.delete k }; h }\nend\n```\n\nAnd here are results which we have got:\n\n*For **20 **keys in hash:*\n```\n                    user      system     total       real\n    new_hash      0.000000   0.000000   0.000000 (  0.000015)\n    new_hash_inj  0.000000   0.000000   0.000000 (  0.000015)\n    by_deleting!  0.000000   0.000000   0.000000 (  0.000017)\n    sort_by       0.000000   0.000000   0.000000 (  0.000024)\n    old_sort      0.000000   0.000000   0.000000 (  0.000038)\n    old_sort_by   0.000000   0.000000   0.000000 (  0.000042)\n    sort          0.000000   0.000000   0.000000 (  0.000050)\n```\n*And for **100 **items:*\n```\n                    user      system      total      real\n    new_hash      0.000000   0.000000   0.000000 (  0.000046)\n    new_hash_inj  0.000000   0.000000   0.000000 (  0.000049)\n    by_deleting!  0.000000   0.000000   0.000000 (  0.000086)\n    old_sort_by   0.000000   0.000000   0.000000 (  0.000093)\n    sort_by       0.000000   0.000000   0.000000 (  0.000097)\n    sort          0.000000   0.000000   0.000000 (  0.000275)\n    old_sort      0.000000   0.000000   0.000000 (  0.000286)\n```\n*And for **100’000 **items:*\n```\n                    user      system     total       real\n    new_hash      0.090000   0.010000   0.100000 (  0.094235)\n    by_deleting!  0.120000   0.000000   0.120000 (  0.126402)\n    new_hash_inj  0.190000   0.000000   0.190000 (  0.193813)\n    sort_by       0.200000   0.010000   0.210000 (  0.202221)\n    old_sort_by   0.290000   0.000000   0.290000 (  0.295042)\n    sort          0.640000   0.010000   0.650000 (  0.668481)\n    old_sort      0.680000   0.000000   0.680000 (  0.689761)\n```\n*And for **1’000’000 **records (by the way, if you have a hash with 1’000’000 keys, then you are doing something wrong):*\n```\n                    user     system      total        real\n    by_deleting!  1.620000   0.010000   1.630000 (  1.656473)\n    new_hash      1.790000   0.030000   1.820000 (  1.885463)\n    new_hash_inj  1.810000   0.020000   1.830000 (  1.856330)\n    old_sort_by   3.650000   0.030000   3.680000 (  3.725720)\n    sort_by       3.760000   0.040000   3.800000 (  3.834567)\n    old_sort      8.860000   0.150000   9.010000 (  9.091311)\n    sort          9.610000   0.120000   9.730000 (  9.843766)\n```\nConsequently, we can see that creating a ‘new hash’ is the fastest way to sort a hash, less fast is ‘by deleting!’ (but it modifies an original array and this is not always allowed). And the shortest way (‘sort’)is also the longest one (from 3x for 20 items to 7x for 1’000’000 items).\n\nIn my opinion, a ‘sort by’ method is a golden mean for sorting hashes. It is simple to understand what it does, it is not so time-consuming as a ‘sort’ method and not so difficult to read as ‘new hash’.\n\nAlthough, we should remember that dealing with big hashes is a bad practice. And if small ones are used, users can’t see any performance difference and ‘sort’ will work well too.\n\nSo, when we decided how we will organize a hash value, let’s add this ordering before validation:\n\n```ruby\nbefore_validation :sort_filter_attributes_by_its_names\n\nprivate \n\ndef sort_filter_attributes_by_its_names\n  self.filter = filter.sort_by { |k, v| k }.to_h\nend\n```\n\nThe last thing to do is to write a method that will perform adding or updating of search filters:\n\n```ruby\ndef self.store(user, filter)\n  search_filter = user.search_filters.create(filter: filter)\n  return if search_filter.valid?\n  \n  user.search_filters.find_by_filter(search_filter).touch\nend\n```\n\nFurther, use this method in the controller action that handles user’s searches.\n\n```ruby\n\nclass SearchController < ApplicationController\n  after_action :store_filter\n\n  def store_filter\n    SearchFilter.store current_user, params[:filter]\n  end\nend\n```\n\nFinally, we have implemented storing of user’s recent search filters and compared efficiency of sorting hashes in Ruby, used to enumerate in deterministic order. {% youtube \"https://youtu.be/Th8JoIan4dg?si=KWVt8xOkpbee36So\" %} \n",
  "user": {
    "name": "JetThoughts Dev",
    "username": "jetthoughts-dev",
    "twitter_username": "jetthoughts",
    "github_username": null,
    "user_id": 432482,
    "website_url": "https://jetthoughts.com",
    "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F432482%2F8e0d29a4-85ee-4c5c-a549-20db3d431664.jpg",
    "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F432482%2F8e0d29a4-85ee-4c5c-a549-20db3d431664.jpg"
  },
  "organization": {
    "name": "JetThoughts",
    "username": "jetthoughts",
    "slug": "jetthoughts",
    "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Forganization%2Fprofile_image%2F2669%2Facd9cc11-3042-4c41-b4df-679a86ec90cc.jpg",
    "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Forganization%2Fprofile_image%2F2669%2Facd9cc11-3042-4c41-b4df-679a86ec90cc.jpg"
  }
}
